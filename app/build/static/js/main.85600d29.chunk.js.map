{"version":3,"sources":["images/notebook-pen-desk.jpg","logo.svg","components/atoms/PublicNavbar/Navbar.jsx","components/atoms/Jumbotron/Jumbotron.jsx","components/pages/public/HomePage/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","classes","AppBar","position","elevation","Container","Toolbar","Typography","variant","className","Button","color","fluid","paddingRight","paddingLeft","paddingTop","paddingBottom","borderRadius","jumbotron","marginBottom","backgroundColor","pad","Navbar","Grid","container","item","md","Jumbotron","Card","CardContent","gutterBottom","component","align","fontSize","CardMedia","image","OverlayImage","height","App","onClick","axios","get","then","res","console","log","data","catch","err","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.85600d29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notebook-pen-desk.b667f872.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Container } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default () => {\n    const classes = useStyles();\n\n    return (\n        <AppBar position=\"static\" elevation={0}>\n            <Container>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        The Exceptional Outliner\n                    </Typography>\n                    <Button color=\"inherit\">About</Button>\n                    <Button color=\"inherit\">Features</Button>\n                    <Button color=\"inherit\">Sign Up</Button>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </Container>\n        </AppBar>\n    );\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Container, Typography, Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    fluid: {\n        paddingRight: 0,\n        paddingLeft: 0,\n        paddingTop: \"4rem\",\n        paddingBottom: \"2rem\",\n        borderRadius: 0,\n    },\n    jumbotron: {\n        marginBottom: \"2rem\",\n        backgroundColor: \"#e9ecef\",\n    },\n}));\n\nexport default () => {\n    const classes = useStyles();\n\n    return (\n        <div className={`${classes.fluid} ${classes.jumbotron}`}>\n            <Container>\n                <Typography variant=\"h4\">Create your world.</Typography>\n                <Typography variant=\"h4\">Plan your novel.</Typography>\n                <Typography variant=\"h4\">Be Exceptional.</Typography>\n                <Button variant=\"contained\" color=\"secondary\">\n                    Create your free account\n                </Button>\n            </Container>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Navbar from \"../../../atoms/PublicNavbar/Navbar\";\nimport {\n    Container,\n    Grid,\n    Card,\n    CardContent,\n    Typography,\n    CardMedia,\n} from \"@material-ui/core\";\nimport PublicIcon from \"@material-ui/icons/Public\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport Jumbotron from \"../../../atoms/Jumbotron/Jumbotron\";\n\nimport OverlayImage from \"../../../../images/notebook-pen-desk.jpg\";\n\nconst useStyles = makeStyles((theme) => ({\n    pad: {\n        paddingLeft: \"15px\",\n        paddingRight: \"15px\",\n    },\n}));\n\nexport default () => {\n    const classes = useStyles();\n    return (\n        <>\n            <Navbar />\n            <Grid container spacing={3} className={classes.pad}>\n                <Grid item md={12}>\n                    <Jumbotron />\n                </Grid>\n                <Grid container item md={12}>\n                    <Grid container item md={12}>\n                        <Container>\n                            <Grid container spacing={3}>\n                                <Grid item md={4}>\n                                    <Card variant=\"outlined\">\n                                        <CardContent>\n                                            <Typography\n                                                gutterBottom\n                                                variant=\"h4\"\n                                                component=\"h2\"\n                                                align=\"center\"\n                                            >\n                                                <PublicIcon fontSize=\"large\" />\n                                            </Typography>\n                                            <Typography\n                                                gutterBottom\n                                                variant=\"h5\"\n                                                component=\"h2\"\n                                                align=\"center\"\n                                            >\n                                                Expand your world\n                                            </Typography>\n                                            <Typography\n                                                variant=\"body1\"\n                                                component=\"p\"\n                                            >\n                                                With wiki-like pages, create and\n                                                expand your one-of-a-kind world.\n                                                Build your characters,\n                                                countries, magic, and more from\n                                                scratch, or use the provided\n                                                questionnaires to get your brain\n                                                working!\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                                <Grid item md={4}>\n                                    <Card variant=\"outlined\">\n                                        <CardContent>\n                                            <Typography\n                                                gutterBottom\n                                                variant=\"h4\"\n                                                component=\"h2\"\n                                                align=\"center\"\n                                            >\n                                                <BuildIcon fontSize=\"large\" />\n                                            </Typography>\n                                            <Typography\n                                                gutterBottom\n                                                variant=\"h5\"\n                                                component=\"h2\"\n                                                align=\"center\"\n                                            >\n                                                Generator (WIP)\n                                            </Typography>\n                                            <Typography\n                                                variant=\"body1\"\n                                                component=\"p\"\n                                            >\n                                                Create countless ideas and names\n                                                for anything, including\n                                                characters, locations, and more.\n                                                You can corrupt generated words\n                                                and provide language root\n                                                options, among many more\n                                                features!\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                                <Grid item md={4}>\n                                    <Card variant=\"outlined\">\n                                        <CardContent>\n                                            <Typography\n                                                gutterBottom\n                                                variant=\"h4\"\n                                                component=\"h2\"\n                                                align=\"center\"\n                                            >\n                                                <CreateIcon fontSize=\"large\" />\n                                            </Typography>\n                                            <Typography\n                                                gutterBottom\n                                                variant=\"h5\"\n                                                component=\"h2\"\n                                                align=\"center\"\n                                            >\n                                                Plan, Organize, Write (WIP)\n                                            </Typography>\n                                            <Typography\n                                                variant=\"body1\"\n                                                component=\"p\"\n                                            >\n                                                Outline your story, or start\n                                                from the first chapter. Take\n                                                advantage of the script and\n                                                storyboard functions for comics\n                                                or screenplays. Write high\n                                                quality stories with our rich\n                                                manuscript editor.fdsfadsa\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            </Grid>\n                        </Container>\n                    </Grid>\n                </Grid>\n                <Grid item md={12}>\n                    <Card>\n                        <CardMedia image={OverlayImage} height=\"140\" />\n                        <div>this text should overlay the image</div>\n                    </Card>\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport axios from \"axios\";\nimport HomePage from \"./components/pages/public/HomePage/HomePage\";\n\nimport \"./App.css\";\nimport \"fontsource-roboto\";\n\nfunction App() {\n    function handleClick1() {\n        axios\n            .get(\"/api/users\")\n            .then((res) => console.log(res.data))\n            .catch((err) => console.log(err));\n    }\n\n    function handleClick2() {\n        axios\n            .get(\"/api/health\")\n            .then((res) => console.log(res.data))\n            .catch((err) => console.log(err));\n    }\n    return (\n        <div className=\"App\">\n            <button onClick={handleClick1}>Hi</button>\n            <button onClick={handleClick2}>Hi2</button>\n\n            <HomePage />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}